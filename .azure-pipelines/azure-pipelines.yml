trigger:
- main
pr:
  branches:
    include:
      - '*'

pool:
  vmImage: 'windows-2019'

variables:
  RootDirectory: '$(Build.SourcesDirectory)'
  Solution: '$(RootDirectory)\src\Azure-Migrate-Export.sln'
  BuildPlatform: 'Any CPU'
  BuildConfiguration: 'Release'
  CopySourceFolder: '$(RootDirectory)\src\bin\Release\'
  OutputRootDirectory: '$(Build.ArtifactStagingDirectory)'
  CopyTargetFolder: '$(OutputRootDirectory)\AzMigExport'

  major: 2
  minor: 0

name: $(major).$(minor).$(Year:yy)$(DayOfYear).$(Rev:r)

stages:
  - stage: Build_Stage
    jobs:
      - job: Build_Job

        steps:
        - task: CmdLine@2
          displayName: 'Set Assembly Version'
          inputs:
            script: '$(RootDirectory)\.version\version.cmd'
            workingDirectory: '$(RootDirectory)'

        - task: NuGetToolInstaller@1
          displayName: 'Installing NuGet Tool'

        - task: NuGetCommand@2
          displayName: 'Restore Packages'
          inputs:
            command: 'restore'
            includeNuGetOrg: true
            restoreSolution: '$(Solution)'

        - task: VSBuild@1
          displayName: 'Build Solution'
          inputs:
            solution: '$(Solution)'
            msbuildArgs: '/p:TargetProfile=Cloud'
            platform: '$(BuildPlatform)'
            configuration: '$(BuildConfiguration)'

        - task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@3 # Secure Development tools extension should be installed in ADO organization
          displayName: 'Run CredScan'
          condition: in(variables['system.pullRequest.targetBranch'], 'generation', 'main')
          inputs:
            toolMajorVersion: V2
            outputFormat: sarif
            scanFolder: '$(RootDirectory)'
            suppressionsFile: '$(RootDirectory)\.config\CredScanSuppressions.json'

        - task: CopyFiles@2
          displayName: 'Copying DLLs to AzMigExport'
          inputs:
            SourceFolder: '$(CopySourceFolder)'
            TargetFolder: '$(CopyTargetFolder)'
            OverWrite: true
            Contents: '**\*.dll'

        - task: CopyFiles@2
          displayName: 'Copying Executable to AzMigExport'
          inputs:
            SourceFolder: '$(CopySourceFolder)'
            TargetFolder: '$(CopyTargetFolder)'
            OverWrite: true
            Contents: '**\Azure-Migrate-Export.exe'

        - task: CopyFiles@2
          displayName: 'Copying Config to AzMigExport'
          inputs:
            SourceFolder: '$(CopySourceFolder)'
            TargetFolder: '$(CopyTargetFolder)'
            OverWrite: true
            Contents: '**\Azure-Migrate-Export.exe.config'

        - task: CopyFiles@2
          displayName: 'Copying Detailed PBIT to AzMigExport'
          inputs:
            SourceFolder: '$(CopySourceFolder)'
            TargetFolder: '$(CopyTargetFolder)'
            OverWrite: true
            Contents: '**\Azure_Migrate_Export_Detailed.pbit'

        - task: CopyFiles@2
          displayName: 'Copying HBC-Lite PBIT to AzMigExport'
          inputs:
            SourceFolder: '$(CopySourceFolder)'
            TargetFolder: '$(CopyTargetFolder)'
            OverWrite: true
            Contents: '**\Azure_Migrate_Export_HBC-Lite.pbit'

        - task: CopyFiles@2
          displayName: 'Copying README to AzMigExport'
          inputs:
            SourceFolder: '$(CopySourceFolder)'
            TargetFolder: '$(CopyTargetFolder)'
            OverWrite: true
            Contents: '**\README.txt'
        
        - task: securedevelopmentteam.vss-secure-development-tools.build-task-binskim.BinSkim@3
          displayName: 'Run BinSkim'
          inputs:
            InputType: 'Basic'
            Function: 'analyze'
            AnalyzeTarget: '$(OutputRootDirectory)\AzMigExport\*.dll;$(OutputRootDirectory)\AzMigExport\*.exe'
        
        - task: PoliCheck@2
          displayName: 'Run PoliCheck'
          inputs:
            targetArgument: '$(OutputRootDirectory)\AzMigExport'
            result: '$(OutputRootDirectory)\PoliCheck\PoliCheck.xml'
            optionsFTPATH: '$(RootDirectory)\.config\PoliCheckFileExtensions.xml'

        - task: PublishBuildArtifacts@1
          condition: succeededOrFailed()
          displayName: 'Publish Build Artifacts'
          inputs:
            #pathToPublish: '$(OutputRootDirectory)'
            artifactName: 'drop_build'